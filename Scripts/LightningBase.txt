/// Lots of bits and pieces from D4D's Lightning Gun used originally...	And significantly modified.

// Puff actor that handles setting its spawn location as the weapon/arc origin's aimpoint
Class LightningPuff : Actor
{
	color colors[3];
	bool fire;

	Default 
	{
		Projectile;
		+NOINTERACTION
		+NOTONAUTOMAP
		+ALWAYSPUFF
		+PUFFONACTORS
		+PUFFGETSOWNER
		+BLOODLESSIMPACT
		+SKYEXPLODE
		+DONTSPLASH
		Radius 0;
		Height 0;
		RenderStyle "None";
		Decal "ScorchSmall";
	}

	States
	{
		Spawn:
			TNT1 A 6;
			Stop;
	}

	override void PostBeginPlay()
	{
		colors[0] = "FFDDEE";
		colors[1] = "FFAAEE";
		colors[2] = "FFFFEE";
	}

	override void Tick()
	{
		Super.Tick();

		if (globalfreeze || level.Frozen) { return; }

		SetAimPoint();
		DoFireball();
	}

	void SetAimPoint()
	{
		if (target)
		{
			if (target.player && target.player.ReadyWeapon is "ProtonPack")
			{
				if (ProtonPack(target.player.ReadyWeapon).aimpoint == (0, 0, 0))
				{
					ProtonPack(target.player.ReadyWeapon).aimpoint = self.pos + (0, 0, 8);
				}

				Vector3 temp = ProtonPack(target.player.ReadyWeapon).aimpoint;

				// This sets the speed of the "dragging" effect of the beam across surfaces
				int targetdelay = 15;

				if (targetdelay > 1)
				{
					ProtonPack(target.player.ReadyWeapon).aimpoint = ((self.pos.x + (targetdelay - 1) * temp.x) / targetdelay, (self.pos.y + (targetdelay - 1) * temp.y) / targetdelay, (self.pos.z + 8 + (targetdelay - 1) * temp.z) / targetdelay);
				}

			}
			else if (target is "ElectricalArc")
			{
				ElectricalArc(target).aimpoint = self.pos;
			}
		}
	}

	void DoFireball()
	{
		if (target)
		{
			if (target.player && target.player.ReadyWeapon is "ProtonPack")
			{
				if (ProtonPack(target.player.ReadyWeapon).victimcount <= 0)
				{
					Actor p = Spawn("Flame", ProtonPack(target.player.ReadyWeapon).aimpoint);

					if (p)
					{
						for (int i = 0; i < 2; i++) {
							p.A_SpawnParticle(colors[i % colors.Size()], SPF_FULLBRIGHT, 15, RandomPick(-1, 1) * FRandom(2.0, 4.0), 0, FRandom(-2.0, 2.0), FRandom(-2.0, 2.0), 0, FRandom(-2.5, 2.5), FRandom(-2.5, 2.5), FRandom(-2.5, 2.5), FRandom(-0.5, 0.5), FRandom(-0.5, 0.5), -0.5, 1.0, -FRandom(0.01, 0.03));
						}
					}
				}
			}
		}
	}
}

Class LightningPuffSmall : LightningPuff
{
	Default 
	{
		Decal "RailScorchLower";
	}

	override void Tick()
	{
		Actor.Tick();

		if (globalfreeze || level.Frozen) { return; }

		SetAimPoint();
	}
}

Class LightningPuffHidden : LightningPuff
{
	Default 
	{
		Decal "";
	}

	override void Tick()
	{
		Actor.Tick();

		if (globalfreeze || level.Frozen) { return; }

		SetAimPoint();
		DoFireBall();
	}
}

// Base class that spawns the actual beam segments
Class LightningBeam : Actor 
{
	double MaxDistance;
	double AngleRandom;
	double PitchRandom;
	int ChokeMin;
	int ChokeMax;
	double StepDistance;
	double user_dista;
	double user_distb;
	double minscale;
	double maxscale;
	int user_choke;
	int user_flags;

	bool locked;
	String trail;
	double stepfactor;
	Actor origin;
	Actor wpnspot;
	int pitchdir;
	int child;
	bool capture;
	double splitamt;
	double faceamt;

	Property MaxDistance:MaxDistance;
	Property AngleRandom:AngleRandom;
	Property PitchRandom:PitchRandom;
	Property ChokeMin:ChokeMin;
	Property ChokeMax:ChokeMax;
	Property TrailActor:trail;
	Property StepFactor:stepfactor;
	Property MinScale:minscale;
	Property MaxScale:maxscale;
	Property AllowSplit:splitamt;
	Property Capture:capture;
	Property FaceAmount:faceamt;

	Default 
	{
		+NOCLIP
		+NOINTERACTION
		+NOBLOCKMAP
		+INTERPOLATEANGLES
		RenderStyle "None";

		LightningBeam.MaxDistance 1024;
		LightningBeam.AngleRandom 5;
		LightningBeam.PitchRandom 5;
		LightningBeam.ChokeMin 1;
		LightningBeam.ChokeMax 3;
		LightningBeam.TrailActor "LightningTrailBeam";
		LightningBeam.StepFactor 1;
		LightningBeam.MinScale 0.0125;
		LightningBeam.MaxScale 0.03;
		LightningBeam.Capture True;
		LightningBeam.FaceAmount 5;
	}

	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			user_distb = MaxDistance;
			user_choke = random(ChokeMin, ChokeMax);

			StepDistance = Random[steps](3, 15) * stepfactor;
	
			if (Scale.X == 1.0) { Scale.X = minscale; } //min(0.0125, minscale);
			Scale.Y = StepDistance;

			user_flags = SXF_NOCHECKPOSITION | SXF_TRANSFERSCALE | SXF_TRANSFERPITCH | SXF_TRANSFERPOINTERS;
			return ResolveState("Moving");
		}
	Sprite:
		TNT1 A 0 A_Jump(256,"Moving");
	Moving:
		"####" "#" 1
		{
			// user_dista = distance currently travelled.
			// user_distb = maximum distance.
			// Make sure we always have a valid target.
			while (user_dista < user_distb)
			{
				double origindist;
				bool spawned;
				Actor t;

				if (master) { origin = master; }

				if (capture)
				{
					if (tracer)
					{
						if (origin) {
							origindist = origin.Distance3D(tracer);
						}

						if (origin && origin.player && ProtonPack(origin.player.ReadyWeapon).victim) {
							tracer = ProtonPack(origin.player.ReadyWeapon).victim;
						}

						if (!locked)
						{
							Actor closest = ClosestMonster();

							if (closest && Distance3d(tracer) > Distance3d(closest)) { tracer = closest; }
	
							if (origindist && origindist < 64) { locked = true; }
						}

						if (tracer.bIsMonster && (!tracer.bShootable || tracer.health <= 0)) { tracer = null; locked = false; }
					}
					else
					{
						tracer = ClosestMonster();
					}
				}
			
				if (origindist)
				{
					if (tracer && tracer.bIsMonster)
					{
						if (user_dista > origindist)
						{
							Scale.X = clamp(sin((user_dista - origindist) * 360 / 256) * maxscale, minscale, maxscale);
						}
						else
						{
							Scale.X = clamp(sin(user_dista * 360 / (origindist * 2)) * maxscale, minscale, maxscale);
						}
					}
					else
					{
						if (Scale.X < minscale)
						{
							Scale.X = (Scale.X + 0.0001 / 1);
						}
						else
						{
							if (user_dista > user_distb * 4 / 5 && minscale > 0.0001) { minscale -= 0.0001; }
							Scale.X = (Scale.X + clamp(sin(user_dista * 360 / user_distb) * maxscale, minscale, maxscale)) / 2;
						}
					}
				}

				if (tracer && (locked || tracer.bIsMonster && tracer.bShootable && Distance3d(tracer) <= tracer.radius + 8)) {
					StepDistance = max(int(tracer.Radius / Random[lasso](8, 10)), 1) * StepFactor;
					Scale.Y = StepDistance;

					if (abs(pitch) < 1) { pitch = Random[beam](-90, 90); }

					if (origin && origin.player && ProtonPack(origin.player.ReadyWeapon)) {
						ProtonPack(origin.player.ReadyWeapon).victim = tracer;
						ProtonPack(origin.player.ReadyWeapon).victimcount = 5;

						if (origindist > 64) { A_FaceTracer(0, 5, 90, 0, FAF_MIDDLE); }

						double pitchdelta = origindist * sin(-origin.pitch) + (origin.pos.z - tracer.pos.z + tracer.height / 2);
						double angledelta = deltaangle(origin.angle, origin.AngleTo(tracer));

						double distdelta = 0;
						if (origindist < 250) { distdelta = 10; }
						else if (origindist > 260) { distdelta = -10; }

						user_distb = origin.Distance3d(tracer) + tracer.radius * 14; // Base number of 'wrapping' segments on the radius of the actor

						if (tracer && tracer.bIsMonster && tracer.bShootable && tracer.health > 0)
						{
							tracer.bNoBlockMonst = True;
							tracer.A_Face(origin);
							tracer.vel = (tracer.vel + (angledelta, distdelta, pitchdelta / 5)) / 3;
							tracer.vel.xy = RotateVector(tracer.vel.xy, origin.AngleTo(tracer) - 90);

							tracer.SetStateLabel("Pain.Stun");

							locked = true;
						}
						else
						{
							tracer = null;

							ProtonPack(origin.player.ReadyWeapon).victim = null;
							locked = false;
						}
					}
				}
				else {
					Vector3 aimpoint;

					if (origin)
					{
						if (origin.player)
						{
							ProtonPack(origin.player.ReadyWeapon).victim = null;
							aimpoint = ProtonPack(origin.player.ReadyWeapon).aimpoint;
						}
						else if (ElectricalArc(origin)) { aimpoint = ElectricalArc(origin).aimpoint; }
					}

					if (!tracer && aimpoint != (0, 0, 0))
					{
						tracer = SpawnPuff("LightningPuff", aimpoint, 180 - angleTo(origin), 180 - angleTo(origin), 0, 0);
						user_distb = min(maxdistance, target.Distance3D(tracer) - StepDistance);
					}

					A_FaceTracer(faceamt, faceamt, 0, 0, FAF_MIDDLE);

					if (user_dista > 256)
					{
						AngleRandom = max(user_dista / 64, AngleRandom);
						PitchRandom = max(user_dista / 64, PitchRandom);
					}

					// Randomizes the angle of the beams. 
					if (user_dista > 0 && user_dista < (user_distb - StepDistance))
					{
						// If we're not about to reach the end, or not hitting the 
						// choker, randomize it. Otherwise, stay on target and go 
						// for the puff.
						if (user_choke > 0)
						{
							double modifier = ElectricalArc(origin) ? FRandom[dir](-1.0, 1.0) : sin(level.time);

							pitch = pitch + (modifier * PitchRandom) * RandomPick[pitchdir](-1, 1);
							angle = angle + (modifier * AngleRandom) * RandomPick[angledir](-1, 1);

							user_choke--;
						}
						else 
						{
							user_choke = random(ChokeMin,ChokeMax);
						}
					}

					// Spawn a split from the main beam
					if (splitamt > 0 && scale.x > 0.001 && Random[split]() < 10 * splitamt * stepfactor * (child + 1) && child < ChokeMax + 3)
					{
						[spawned, t] = A_SpawnItemEx(self.GetClass(), cos(pitch), 0, -sin(pitch), 0, 0, 0, 0, user_flags);
						if (spawned) {
							t.master = master;
							t.pitch = FRandom(pitch - PitchRandom, pitch + PitchRandom);
							t.angle = FRandom(angle - AngleRandom, angle + AngleRandom);
							t.tracer = tracer;
							LightningBeam(t).wpnspot = wpnspot;
							LightningBeam(t).MaxDistance = Random[beamsplit](4, 32);
							LightningBeam(t).child = child + 1;
							LightningBeam(t).StepFactor = stepfactor * 0.75;
							LightningBeam(t).capture = capture;
							t.scale.x = scale.x / (child + 1);
						}
					}
				}

				// Spawn the beam with the same angle and pitch. Note that the
				// beam is being centered so we have to take that into account
				// and spawn it FORWARD based on half the beam's length.
				// Then move forward by a beam's length and repeat until done.
				[spawned, t] = A_SpawnItemEx(trail, cos(pitch) * (StepDistance / 2.0), 0, -sin(pitch) * (StepDistance / 2.0), 0, 0, 0, 0, user_flags);
				if (MovingTrailBeam(t)) {
					t.target = origin;
					MovingTrailBeam(t).origin = wpnspot;
					MovingTrailBeam(t).beamlocked = locked;
					t.tracer = master;
					t.pitch = pitch + 90;
				}

				A_Warp(AAPTR_DEFAULT, cos(pitch) * StepDistance, 0, -sin(pitch) * StepDistance,0,WARPF_NOCHECKPOSITION);
				if (user_dista > 0 && origin && !CheckSight(origin, 0)) { user_dista = user_distb; }
				user_dista += StepDistance;
			}
		}
		Stop;
	}

	actor ClosestMonster(void)
	{
		ThinkerIterator Finder = ThinkerIterator.Create("Actor", Thinker.STAT_DEFAULT);
		Actor mo, closest;
		while (mo = Actor(Finder.Next()))
		{
			if (mo == self || mo == origin || !mo.bShootable || mo.bDormant || !mo.bIsMonster) { continue; }
//			if (mo.health > mo.Default.Health / 4) { continue; }
			if (!origin.IsVisible(mo, true)) { continue; }
			if (Distance3d(mo) > 256) { continue; }
			if (closest && Distance3d(mo) > Distance3d(closest)) { continue; }

			closest = mo;
		}

		return closest;
	}
}

Class LightningBeamBlue : LightningBeam
{
	Default 
	{
		LightningBeam.TrailActor "LightningTrailBeamBlue";
		LightningBeam.AngleRandom 10;
		LightningBeam.PitchRandom 10;
		LightningBeam.StepFactor 1.5;
		LightningBeam.MinScale 0.005;
		LightningBeam.MaxScale 0.01;
		LightningBeam.AllowSplit 1;
	}
}

Class LightningBeamArc : LightningBeam
{
	Default 
	{
		LightningBeam.MaxDistance 512;
		LightningBeam.TrailActor "LightningTrailBeamArc";
		LightningBeam.AngleRandom 30;
		LightningBeam.PitchRandom 15;
		LightningBeam.ChokeMin 5;
		LightningBeam.ChokeMax 5;
		LightningBeam.StepFactor 1.0;
		LightningBeam.MinScale 0.025;
		LightningBeam.MaxScale 0.05;
		LightningBeam.AllowSplit 0.5;
		LightningBeam.Capture False;
		LightningBeam.FaceAmount 0;
	}
}

// Base class for the beam segments
Class MovingTrailBeam : Actor 
{
	String trail;
	String puff;
	Vector3 beamoffset;
	Actor origin;
	bool beamlocked;
	bool originset;
	int damage;

	Property TrailActor:trail;
	Property PuffActor:puff;
	Property Damage:damage;

	Default
	{
		+NOINTERACTION
		+BRIGHT
		+INVISIBLE
		+INTERPOLATEANGLES
		YScale 0.1220703125; //0.25; //Don't touch this! Otherwise the trail will become broken up!
		XScale 0.03; //This modifies the width of the beam. It is safe to play around with.
		RenderStyle "Add";
		MovingTrailBeam.TrailActor "MovingTrailBeam";
		MovingTrailBeam.PuffActor "LightningPuff";
		MovingTrailBeam.Damage 0;

		// DO NOT add a translation. If you need to change the colors, make a sprite
		// entry in TEXTURES lump and use BLEND. NEVER TRANSLATE!
	}

	States
	{
		Spawn:
			MODL A 7 Bright;
			Stop;
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();

		// Used to make all individual bolt segments leave decals and cause damage

		A_CustomBulletAttack(0, 0, 1, damage, puff, 24, CBAF_AIMFACING);

		if (origin) {
			beamoffset = pos - origin.pos;
		}
	}

	override void Tick()
	{
		Super.Tick();

		if (globalfreeze || level.Frozen) { return; }

		if (originset) { bInvisible = False; }

		if (origin)
		{
			SetOrigin(origin.pos + beamoffset, true);

			originset = true;
		}
	}
}

Class LightningTrailBeam : MovingTrailBeam
{
	Default
	{
		MovingTrailBeam.TrailActor "LightningTrailBeam";
		MovingTrailBeam.PuffActor "LightningPuff";
	}
}

Class LightningTrailBeamBlue : MovingTrailBeam
{
	Default
	{
		MovingTrailBeam.TrailActor "LightningTrailBeamBlue";
		MovingTrailBeam.PuffActor "LightningPuffSmall";
	}

	States
	{
		Spawn:
			MODL A 6 Bright;
		FadeLoop:
			MODL A 1 A_FadeOut(0.1);
			Loop;
	}
}

Class LightningTrailBeamArc : MovingTrailBeam
{
	Default
	{
		MovingTrailBeam.TrailActor "LightningTrailBeamArc";
		MovingTrailBeam.PuffActor "LightningPuffSmall";
		MovingTrailBeam.Damage 1;
	}
}